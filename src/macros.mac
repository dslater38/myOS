%include "mbootconst.mac"
%include "gdtconst.mac"

%MACRO  get_GOT 0 
        call    %%getgot 
  %%getgot: 
        pop     ebx 
        add     ebx,_GLOBAL_OFFSET_TABLE_+$$-%%getgot wrt ..gotpc 
%ENDMACRO

; use as GDT base, limit, flags
%MACRO GDT 3
	dq (%2 & 0xFFFF)|( (%1 & 0xFFFFFF)<<16) |( (%2 & 0x0F0000) << 32) | ((%1 & 0xFF000000) << 32) | (%3)
%ENDMACRO

%macro ISR_NOERRCODE 1  ; define a macro, taking one parameter
  [GLOBAL isr%1]        ; %1 accesses the first parameter.
  isr%1:
    cli
    push qword 0
    push qword %1
    jmp isr_common_stub
%endmacro

%macro ISR_ERRCODE 1
  [GLOBAL isr%1]
  isr%1:
    cli
    push qword %1
    jmp isr_common_stub
%endmacro

; This macro creates a stub for an IRQ - the first parameter is
; the IRQ number, the second is the ISR number it is remapped to.
%macro IRQ 2
  [GLOBAL irq%1]
  irq%1:
	cli
	push qword 0
	push qword %2
	jmp irq_common_stub
%endmacro

%macro PUSHAQ 0
	push qword r15
	push qword r14
	push qword r13
	push qword r12
	push qword r11
	push qword r10
	push qword r9
	push qword r8
	push qword rax
	push qword rcx
	push qword rdx
	push qword rbx
	push qword rsp
	push qword rbp
	push qword rsi
	push qword rdi
%endmacro

%macro POPAQ 0
	pop qword rdi
	pop qword rsi
	pop qword rbp
	add rsp,8
	pop qword rbx
	pop qword rdx
	pop qword rcx
	pop qword rax
	pop qword r8
	pop qword r9
	pop qword r10
	pop qword r11
	pop qword r12
	pop qword r13
	pop qword r14
	pop qword r15
%endmacro

%macro COMMON_STUB 2
[EXTERN %2]

%1:
						; on entry, the stack looks like SS, RSP, RFLAGS, CS, RIP, ERROR_CODE, ISR_#
	PUSHAQ				; save general registers

	mov ax, ds			; Lower 16-bits of eax = ds.
	push qword rax		; save the data segment descriptor	
						; stack now looks like SS, RSP, RFLAGS, CS, RIP, ERROR_CODE, ISR_#, r15, r14,...,r8,rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi,DS
	mov ax, 0x10		; load the kernel data segment descriptor
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax

	mov rdi, rsp		; x86_64 passes first arg in rdi. 

	call %2				; call the handler

	pop rax				; reload the original data segment descriptor
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax

	POPAQ				; restore registers
						; stack now looks like: SS, RSP, RFLAGS, CS, RIP, ERROR_CODE, ISR_#
	add rsp,16	     	; Clean up the pushed error code and ISR number
	sti					; stack now looks like: SS, RSP, RFLAGS, CS, RIP
	iretq           	; pops 5 things at once: SS, RSP, RFLAGS, CS, RIP
%endmacro